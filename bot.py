import telebot
import random

CHAVE_API = "8378976247:AAGwzpdTg4avT0RyBQnDjT0gFAcYEdRCO74"
bot = telebot.TeleBot(CHAVE_API)

frases = [
    "‚ÄúSim, minha for√ßa est√° na solid√£o. N√£o tenho medo nem de chuvas tempestivas, nem das grandes ventanias soltas, pois eu tamb√©m sou o escuro da noite..‚Äù ‚Äì Clarice Lispector",
    "'A leitura √© para o intelecto o que o exerc√≠cio √© para o corpo.' ‚Äì Joseph Addison",
    "'Um livro √© um sonho que voc√™ segura com as m√£os.' ‚Äì Neil Gaiman",
    "'Ler √© sonhar pela m√£o de outro.' ‚Äì Fernando Pessoa!",
    "‚ÄúN√£o h√° lugar como o nosso lar.‚Äù ‚Äì O M√°gico de Oz, L. Frank Baum",
    "‚Äú√â s√≥ com o cora√ß√£o que se pode ver direito; o essencial √© invis√≠vel aos olhos.‚Äù ‚Äì O Pequeno Pr√≠ncipe, Antoine de Saint-Exup√©ry",
    "‚ÄúA liberdade √© apenas uma oportunidade para ser melhor.‚Äù ‚Äì Albert Camus, A Peste",
    "‚ÄúTodos n√≥s temos luz e sombra dentro de n√≥s. O que importa √© a parte que decidimos nutrir.‚Äù ‚Äì O Hobbit, J.R.R. Tolkien",
    "‚ÄúAs pessoas que amamos nunca nos deixam de verdade.‚Äù ‚Äì Harry Potter e o C√°lice de Fogo, J.K. Rowling",
    "‚ÄúN√£o se preocupe com o amanh√£; ele se preocupar√° consigo mesmo.‚Äù ‚Äì O Sol √© Para Todos, Harper Lee",
    "‚ÄúSe voc√™ quer mudar o mundo, comece por voc√™ mesmo.‚Äù ‚Äì O Pequeno Pr√≠ncipe, Antoine de Saint-Exup√©ry",
    "‚ÄúA esp√©cie humana finge ser t√£o resiliente. As vidas mortais s√£o uma longa brincadeira de faz de conta. Se voc√™s n√£o pudessem mentir para si mesmos, cortariam a pr√≥pria garganta para acabar com sua infelicidade.‚Äù ‚Äì O Pr√≠ncipe Cruel, Holly Black",
    "Eu ficava feliz quando estava com ela, mas isso do√≠a um pouco, e do√≠a quando n√£o est√°vamos juntos tamb√©m. - Percy jackson, Rick riordan",
    "‚ÄúO poder √© bem mais f√°cil de adquirir do que de manter. - O Pr√≠ncipe Cruel, Holly Black‚Äù"
]

livros_do_clube = [
    "'Dom Casmurro' - Machado de Assis",
    "'O Pequeno Pr√≠ncipe' - Antoine de Saint-Exup√©ry",
    "'1984' ‚Äì George Orwell",
    "'Capit√£es da Areia' ‚Äì Jorge Amado",
    "'√Ågua Viva' ‚Äì Clarice Lispector",
    "'As mil partes do meu cora√ß√£o' ‚Äì Collen Hoover",
    "'Melhor do que nos filmes' ‚Äì Lynn Painter",
    "'Divinos rivais' - Rebeca Ross",
    "'O Pr√≠ncipe Cruel', Holly Black",
    "'Percy Jackson e o O Ladr√£o de Raios - Rick Riordan",
    "'Mem√≥rias P√≥stumas de Br√°s Cubas' - Machado de Assis",
    "'O Corti√ßo' - Alu√≠sio Azevedo",
    "'Vidas Secas' - Graciliano Ramos",
    "'Capit√£es da Areia' - Jorge Amado",
    "'Grande Sert√£o: Veredas' - Guimar√£es Rosa"
]

resumos_livros = {
    "dom casmurro": "Dom Casmurro √© um romance de Machado de Assis que narra a vida de Bento Santiago, conhecido como Dom Casmurro, abordando temas como ci√∫mes, trai√ß√£o e a d√∫vida sobre a fidelidade de Capitu.",
    "o pequeno pr√≠ncipe": "O Pequeno Pr√≠ncipe, de Antoine de Saint-Exup√©ry, conta a hist√≥ria de um pequeno pr√≠ncipe que viaja por planetas diferentes e aprende li√ß√µes sobre amor, amizade e humanidade.",
    "1984": "1984, de George Orwell, √© uma distopia que descreve um futuro totalit√°rio onde o governo controla todos os aspectos da vida, incluindo pensamentos e comportamentos.",
    "capit√£es da areia": "Capit√£es da Areia, de Jorge Amado, narra a vida de um grupo de meninos de rua em Salvador e suas aventuras, desafios e sonhos.",
    "√°gua viva": "√Ågua Viva, de Clarice Lispector, √© uma narrativa introspectiva e po√©tica que explora pensamentos e sensa√ß√µes da narradora em fluxo de consci√™ncia.",
    "as mil partes do meu cora√ß√£o": "As Mil Partes do Meu Cora√ß√£o, de Colleen Hoover, conta a hist√≥ria de uma jovem lidando com um cora√ß√£o partido e os desafios do amor e amizade.",
    "melhor do que nos filmes": "Melhor do Que Nos Filmes, de Lynn Painter, acompanha a vida de uma adolescente enfrentando as dificuldades do primeiro amor e os desafios da vida adolescente."
}

quiz_perguntas = [
    {
        "pergunta": "Quem escreveu Dom Casmurro?",
        "alternativas": ["a) √Ålvares de Azevedo", "b) Machado de Assis", "c) Jos√© de Alencar"],
        "correta": "b) Machado de Assis"
    },
    {
        "pergunta": "Qual autor criou o personagem Sherlock Holmes?",
        "alternativas": ["a) Agatha Christie", "b) Arthur Conan Doyle", "c) Edgar Allan Poe"],
        "correta": "b) Arthur Conan Doyle"
    },
    {
        "pergunta": "Em qual livro aparece o personagem Frodo Bolseiro?",
        "alternativas": ["a) O Hobbit", "b) O Senhor dos An√©is", "c) As Cr√¥nicas de N√°rnia"],
        "correta": "b) O Senhor dos An√©is"
    }
]

@bot.message_handler(commands=["start", "oi"])
def responder_inicio(mensagem):
    bot.reply_to(mensagem, "Ol√°! Aqui √© o KindleBot. Use /frase, /clube, /livro, /quiz ou /resumo para interagir!")

@bot.message_handler(commands=["frase"])
def enviar_frase(mensagem):
    bot.reply_to(mensagem, random.choice(frases))

@bot.message_handler(commands=["clube"])
def enviar_livro_clube(mensagem):
    bot.reply_to(mensagem, random.choice(livros_do_clube))

@bot.message_handler(commands=["resumo"])
def enviar_resumo(mensagem):
    texto = mensagem.text.split("/resumo", 1)
    
    if len(texto) == 1 or not texto[1].strip(): 
        livros_disponiveis = "\n".join([f"- {livro.title()}" for livro in resumos_livros.keys()])
        bot.reply_to(mensagem, f"Livros dispon√≠veis para resumo:\n{livros_disponiveis}\n\nUse /resumo nome_do_livro para receber o resumo.")
    else:
        nome_livro = texto[1].strip().lower()
        resumo = resumos_livros.get(nome_livro)
        if resumo:
            bot.reply_to(mensagem, f"Resumo de '{nome_livro.title()}':\n{resumo}")
        else:
            bot.reply_to(mensagem, "Desculpe, esse livro n√£o est√° dispon√≠vel no banco de resumos.")

@bot.message_handler(commands=["quiz"])
def iniciar_quiz(mensagem):
    pergunta = random.choice(quiz_perguntas)
    msg = f"Pergunta: {pergunta['pergunta']}\n" + "\n".join(pergunta['alternativas'])
    bot.send_message(mensagem.chat.id, msg)
    bot.register_next_step_handler_by_chat_id(mensagem.chat.id, verificar_resposta, pergunta)

def verificar_resposta(mensagem, pergunta):
    resposta_usuario = mensagem.text.strip().lower()

    correta = pergunta["correta"].lower()
    letra_correta = correta[0] 
    texto_correto = correta[3:].strip() 

    if (resposta_usuario == letra_correta or
        resposta_usuario == letra_correta + ")" or
        resposta_usuario == texto_correto.lower()):
        bot.reply_to(mensagem, f"‚úÖ Parab√©ns! Voc√™ acertou! A resposta correta √©: {pergunta['correta']}")
    else:
        bot.reply_to(mensagem, f"‚ùå Errado! A resposta correta √©: {pergunta['correta']}")

    bot.send_message(mensagem.chat.id, "Use /quiz para tentar outra pergunta!")

print("ü§ñ Bot est√° rodando... Envie /start ou /oi no Telegram")
bot.infinity_polling()
